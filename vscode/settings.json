{
  "workbench.startupEditor": "welcomePageInEmptyWorkbench",
  "editor.linkedEditing": true,
  "editor.hover.delay": 200,
  "editor.mouseWheelZoom": true,
  "editor.stickyScroll.enabled": true,
  "editor.snippetSuggestions": "top",

  //* Settings.
  "workbench.settings.editor": "json",
  // "workbench.settings.useSplitJSON": true,

  //* Inlay Hints.
  // bind is the same as switch languages on mac os
  "editor.inlayHints.enabled": "on",
  "editor.inlayHints.padding": true,

  //* Unicode.
  "editor.unicodeHighlight.includeStrings": false,
  "editor.unicodeHighlight.ambiguousCharacters": false,

  //* Zen Mode.
  "zenMode.fullScreen": false,
  "zenMode.centerLayout": false,
  "zenMode.hideLineNumbers": false,
  "zenMode.hideStatusBar": false,

  //* Tree View.
  "workbench.tree.renderIndentGuides": "none",
  "workbench.tree.indent": 10,

  //* Editors.
  "workbench.editor.enablePreview": false,
  "workbench.sash.size": 10,

  //* Debug.
  "debug.console.fontSize": 13,

  //* Brackets.
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.bracketPairs": true,
  "editor.bracketPairColorization.independentColorPoolPerBracketType": true,
  // "editor.guides.indentation": false,

  //* Window.
  "window.dialogStyle": "custom",
  "window.confirmBeforeClose": "keyboardOnly",
  "window.commandCenter": true,
  // "window.nativeTabs": true,

  //* Explorer.
  "explorer.openEditors.visible": 0,
  "explorer.fileNesting.enabled": true,
  // "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "explorer.autoRevealExclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "**/.venv": true
  },

  //* Scrolling.
  "editor.smoothScrolling": true,
  "workbench.list.smoothScrolling": true,

  //* Tabs.
  // "workbench.editor.highlightModifiedTabs": true,
  "workbench.editor.tabCloseButton": "right",
  // "workbench.editor.tabSizing": "shrink",
  "workbench.editor.wrapTabs": true,

  //* Panel/Sidebar/ActivityBar.
  "workbench.panel.defaultLocation": "bottom",

  //* Minimap.
  "editor.minimap.renderCharacters": false,
  "editor.minimap.size": "fill",
  "editor.minimap.showSlider": "always",

  //* Formatting & Fixing.
  "editor.codeActionsOnSave": {
    "source.fixAll": "explicit",
    "source.addMissingImports": "explicit"
  },
  "editor.formatOnPaste": true,
  "editor.formatOnSave": true,
  "editor.formatOnType": true,
  "files.trimTrailingWhitespace": true,
  "files.trimFinalNewlines": true,

  //* Completion.
  "editor.suggest.insertMode": "replace",
  "editor.tabCompletion": "on",
  "editor.wordBasedSuggestions": "off",
  "editor.inlineSuggest.enabled": true,
  "editor.quickSuggestions": {
    "strings": true
    // "other": "inline"
  },

  //* Cursor.
  "editor.cursorBlinking": "solid",
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.cursorWidth": 3,

  //* Font.
  "editor.codeLensFontFamily": "MonoLisa, Menlo, Monaco, 'Courier New', monospace",
  "editor.fontFamily": "MonoLisa, Menlo, Monaco, 'Courier New', monospace",
  "editor.fontLigatures": true,
  "editor.fontSize": 13,

  //* Indentation.
  "editor.detectIndentation": true,
  "editor.tabSize": 2,

  //* Whitespace.
  "editor.insertSpaces": true,
  // "editor.renderWhitespace": "boundary",
  "editor.renderControlCharacters": true,
  "files.eol": "\n",

  //* Lines.
  "editor.lineHeight": 24,
  "editor.lineNumbers": "relative",
  "editor.rulers": [90],
  "editor.renderLineHighlight": "line",

  //* Git.
  // "scm.defaultViewMode": "tree",
  "scm.diffDecorationsGutterWidth": 5,
  "scm.defaultViewSortKey": "name",
  "diffEditor.renderIndicators": false,
  "diffEditor.renderSideBySide": false,
  "git.terminalAuthentication": false,
  "git.untrackedChanges": "separate",
  "git.closeDiffOnOperation": true,
  "git.autofetch": true,
  // "git.terminalGitEditor": true,

  //* Search.
  "search.showLineNumbers": true,
  "search.quickOpen.history.filterSortOrder": "recency",
  "search.searchEditor.doubleClickBehaviour": "openLocationToSide",
  "search.sortOrder": "countDescending",
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "**/*.code-search": true,
    "**/package-lock.json": true
  },

  //* Terminal.
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.copyOnSelection": true,
  "terminal.integrated.fontSize": 13,
  "terminal.integrated.commandsToSkipShell": ["-workbench.action.terminal.focusFind"],
  "terminal.integrated.showExitAlert": false,
  "terminal.external.osxExec": "iTerm.app",
  "terminal.integrated.scrollback": 5000,
  "terminal.integrated.shellIntegration.enabled": false,
  "terminal.integrated.tabs.hideCondition": "singleGroup",
  "terminal.integrated.smoothScrolling": true,
  "terminal.integrated.autoReplies": { "Terminate batch job (Y/N)?": "Y\r" },
  "terminal.integrated.env.osx": {},

  //* Color Theme & Icon Theme.
  "workbench.colorTheme": "Night Owl (No Italics)",
  "workbench.iconTheme": "vscode-icons",
  "workbench.colorCustomizations": {
    "[Night Owl][Night Owl (No Italics)]": {
      // Custom.
      "editor.lineHighlightBackground": "#333",
      "editorCursor.foreground": "#DC8CFF",
      "statusBar.foreground": "#D6DEEB",
      "activityBar.activeBorder": "#FF50FF",
      "tab.activeBorder": "#FF50FF",
      "panelTitle.activeBorder": "#FF50FF",
      // Night Owl.
      "activityBar.background": "#000C1D",
      "activityBar.border": "#102a44",
      "editorGroup.border": "#102a44",
      "sideBar.background": "#001122",
      "sideBar.border": "#102a44",
      "sideBar.foreground": "#8BADC1"
    }
  },

  "editor.tokenColorCustomizations": {
    "[Night Owl][Night Owl (No Italics)]": {
      "textMateRules": [
        {
          "scope": [
            "meta.object.member.ts meta.var.expr.ts storage.type.ts",
            "meta.object.member.tsx meta.var.expr.tsx storage.type.tsx",
            "meta.object.member.js.jsx meta.var.expr.js.jsx storage.type.js.jsx",
            "meta.objectliteral.ts meta.var.expr.ts storage.type.ts",
            "meta.objectliteral.tsx meta.var.expr.tsx storage.type.tsx",
            "meta.objectliteral.js.jsx meta.var.expr.js.jsx storage.type.js.jsx"
          ],
          "settings": {
            "foreground": "#C792EA"
          }
        }
        // Colors like in https://github.com/haishanh/night-owl.vim
        // {
        //   "scope": [
        //     "entity.name.type.interface.tsx", // interface name.
        //     "meta.class.tsx meta.definition.method.tsx entity.name.function.tsx", // class method name.
        //     "meta.definition.function.tsx entity.name.function.tsx", // function name.
        //     "entity.name.type.alias.tsx" // type name.
        //     // "meta.function-call.tsx variable.other.object.tsx "
        //   ],
        //   "settings": {
        //     "foreground": "#7FDBCA"
        //   }
        // },
        // {
        //   "scope": [
        //     "storage.type.interface.tsx", // `interface`.
        //     "storage.type.type.tsx", // '`type'.
        //     "meta.interface.tsx storage.modifier.tsx", // `extends`.
        //     "storage.type.function.tsx", // `function`.
        //     "storage.type.class.tsx", // `class`.
        //     "storage.modifier.async.tsx" // `async`.
        //   ],
        //   "settings": {
        //     "foreground": "#82AAFF"
        //   }
        // },
        // {
        //   "scope": ["variable.language.this.tsx"], // `this`.
        //   "settings": {
        //     "foreground": "#C5E478"
        //   }
        // }
        // {
        //   "scope": [
        //     "keyword.control.import.tsx",
        //     "keyword.control.as.tsx",
        //     "keyword.control.from.tsx",
        //     "keyword.control.export.tsx"
        //   ],
        //   "settings": {
        //     "foreground": "#e99413"
        //   }
        // }
      ]
    }
  },

  //* Files.
  // "files.simpleDialog.enable": true,
  "files.defaultLanguage": "${activeEditorLanguage}",
  "files.hotExit": "onExit",
  "files.associations": {
    // shell.
    ".env": "shellscript",
    ".env.*": "shellscript",
    "Pipfile": "toml",
    // react.
    // "*.js": "javascriptreact",
    // "*.ts": "typescriptreact",
    "*.css": "tailwindcss"
    // django.
    // "**/templates/**/*.html": "django-html",
    // "**/templates/**/*": "django-txt"
  },
  "files.exclude": {
    "**/.git/**": true,
    // "**/node_modules/**": true,
    // "**/.venv/**": true,
    // "**/*cache*/**": true,
    // "**/*coverage*/**": true,
    "tsconfig.tsbuildinfo": true,
    "**/*.pyc": true,
    // "**/react-app-env.d.ts": true,
    // "**/next-env.d.ts": true
    "**/__pycache__": true,
    "**/.mypy_cache": true,
    "**/.pytest_cache": true,
    "**/.ruff_cache": true
  },
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook"
  },

  //* Extensions.
  "extensions.closeExtensionDetailsOnViewChange": true,

  //* Python.
  "[python]": {
    "editor.defaultFormatter": "ms-python.python",
    "editor.tabSize": 4,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit"
    },
    "editor.formatOnType": true
  },
  "python.testing.pytestEnabled": true,
  "python.analysis.inlayHints.variableTypes": false,
  "python.analysis.inlayHints.functionReturnTypes": false,
  // "python.analysis.typeCheckingMode": "strict",
  "python.terminal.launchArgs": ["-m", "IPython", "--no-autoindent"],

  "[astro]": {
    "editor.defaultFormatter": "astro-build.astro-vscode"
  },

  //* HTML.
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  // "[django-html]": {
  //   "editor.defaultFormatter": "HookyQR.beautify"
  // },

  //* CSS/SCSS.
  "[css][scss][tailwindcss]": {
    // "editor.defaultFormatter": "stylelint.vscode-stylelint"
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  //* Markdown.
  "markdown.preview.fontSize": 18,
  "[markdown]": {
    "editor.defaultFormatter": "DavidAnson.vscode-markdownlint",
    "editor.quickSuggestions": { "comments": "off", "strings": "off", "other": "off" },
    "editor.acceptSuggestionOnEnter": "off"
  },

  //* JSON.
  "[json][jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  //* JavaScript.
  "[javascript][javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "javascript.updateImportsOnFileMove.enabled": "always",
  // "js/ts.implicitProjectConfig.checkJs": true,
  // "javascript.inlayHints.parameterNames.enabled": "literals",
  "javascript.inlayHints.functionLikeReturnTypes.enabled": false,
  "javascript.inlayHints.variableTypes.enabled": false,
  // "javascript.inlayHints.parameterTypes.enabled": true,

  //* TypeScript.
  "[typescript][typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.enablePromptUseWorkspaceTsdk": true,
  // This setting messes up react components completion.
  // "typescript.suggest.completeFunctionCalls": true,
  "typescript.inlayHints.parameterNames.enabled": "literals",
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.enumMemberValues.enabled": true,
  // "typescript.inlayHints.propertyDeclarationTypes.enabled": true,

  "[swift]": {
    "editor.inlayHints.enabled": "off"
  },

  //* Shell.
  "[shellscript]": {
    "editor.defaultFormatter": "foxundermoon.shell-format"
  },

  //* Haskell.
  "[haskell]": {
    "editor.defaultFormatter": "haskell.haskell"
  },

  //* Elm.
  "[elm]": {
    "editor.defaultFormatter": "elmTooling.elm-ls-vscode"
  },
  "elmLS.disableElmLSDiagnostics": true,

  //* Docker.
  "[dockerfile]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },
  "[dockercompose]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },

  //* Vim.
  "vim.leader": " ",
  "vim.vimrc.enable": false,
  "vim.textwidth": 90,
  "vim.foldfix": false,
  // "vim.cursorStylePerMode.insert": "block",

  "vim.handleKeys": {
    // vscode: go to line/column
    // vim: print the current file name, the cursor position and the file status
    "<C-g>": false,
    // vscode windows: toggle panel visibility
    // vim: move [count] lines down
    "<C-j>": false
  },

  // neovim.
  "vim.enableNeovim": true,
  "vim.neovimPath": "/opt/homebrew/bin/nvim",

  // gutter.
  "vim.smartRelativeLine": true,
  "vim.showMarksInGutter": false,

  // copying.
  "vim.useSystemClipboard": false,
  "vim.highlightedyank.enable": true,

  // search.
  "vim.hlsearch": false,
  "vim.ignorecase": true,
  "vim.smartcase": true,
  "vim.incsearch": true,
  "vim.visualstar": true,

  // extensions.
  "vim.camelCaseMotion.enable": true,
  "vim.surround": true,
  "vim.easymotion": false,
  "vim.replaceWithRegister": false,
  "vim.targets.enable": false,
  "vim.sneak": false,

  "vim.digraphs": {
    "R!": ["🚀 ", ["0xD83D", "0xDE80"]],
    "S!": ["🤷‍♀️ ", ["0XD83E", "0XDD37", "0X200D", "0X2640", "0XFE0F"]],
    "T!": ["🥲 ", ["0xD83E", "0XDD72"]],
    "OO": ["🦉 ", ["0xD83E", "0xDD89"]]
  },

  "vim.insertModeKeyBindingsNonRecursive": [
    { "before": ["C-y", ","], "commands": ["editor.emmet.action.expandAbbreviation"] }
    // disable arrow keys.
    // { "before": ["left"], "after": [""] },
    // { "before": ["right"], "after": [""] },
    // { "before": ["down"], "after": [""] },
    // { "before": ["up"], "after": [""] }
  ],

  "vim.visualModeKeyBindingsNonRecursive": [
    { "before": [">"], "commands": ["editor.action.indentLines"] },
    { "before": ["<"], "commands": ["editor.action.outdentLines"] },
    { "before": ["[", "e"], "commands": ["editor.action.moveLinesUpAction"] },
    { "before": ["]", "e"], "commands": ["editor.action.moveLinesDownAction"] },

    // emmet.
    // { "before": ["<leader>", "e", "w"], "commands": ["editor.emmet.action.wrapWithAbbreviation"] },

    // git.
    { "before": ["<leader>", "g", "a"], "commands": ["git.stageSelectedRanges"] },
    { "before": ["<leader>", "g", "u"], "commands": ["git.unstageSelectedRanges"] },

    // code actions.
    {
      "before": ["<leader>", "e", "c"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.extract.constant" }
        }
      ]
    },
    {
      "before": ["<leader>", "e", "f"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.extract.function" }
        }
      ]
    },
    {
      "before": ["<leader>", "e", "t"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.extract.type" }
        }
      ]
    },
    {
      "before": ["<leader>", "a", "b"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.rewrite.arrow.braces" }
        }
      ]
    },
    {
      "before": ["<leader>", "m", "f"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.move.newFile" }
        }
      ]
    },
    { "before": ["<leader>", "h", "s"], "commands": ["git.stageSelectedRanges"] },
    { "before": ["<leader>", "h", "r"], "commands": ["git.revertSelectedRanges"] }
  ],

  "vim.normalModeKeyBindingsNonRecursive": [
    { "before": ["N"], "after": ["N", "z", "z"] },
    { "before": ["n"], "after": ["n", "z", "z"] },
    { "before": ["<C-d>"], "after": ["<C-d>", "z", "z"] },
    { "before": ["<C-u>"], "after": ["<C-u>", "z", "z"] },
    { "before": ["<C-f>"], "after": ["<C-f>", "z", "z"] },
    { "before": ["<C-b>"], "after": ["<C-b>", "z", "z"] },
    // { "before": ["{"], "after": ["{", "z", "z"] },
    // { "before": ["}"], "after": ["}", "z", "z"] },
    { "before": ["g", "d"], "after": ["g", "d", "z", "z"] },

    // g commands.
    { "before": ["K"], "commands": ["editor.action.showHover"] },
    { "before": ["g", "D"], "commands": ["editor.action.revealDefinitionAside"] },

    // z commands.
    { "before": ["z", "j"], "commands": ["editor.gotoNextFold"] },
    { "before": ["z", "k"], "commands": ["editor.gotoPreviousFold"] },

    // window commands.
    { "before": ["<C-w>", "o"], "commands": ["workbench.action.closeOtherEditors"] },
    {
      "before": ["<C-w>", "H"],
      "commands": ["workbench.action.moveActiveEditorGroupLeft"]
    },
    {
      "before": ["<C-w>", "J"],
      "commands": ["workbench.action.moveActiveEditorGroupDown"]
    },
    {
      "before": ["<C-w>", "K"],
      "commands": ["workbench.action.moveActiveEditorGroupUp"]
    },
    {
      "before": ["<C-w>", "L"],
      "commands": ["workbench.action.moveActiveEditorGroupRight"]
    },
    { "before": ["<C-w>", ">"], "commands": ["workbench.action.increaseViewWidth"] },
    { "before": ["<C-w>", "<"], "commands": ["workbench.action.decreaseViewWidth"] },
    { "before": ["<C-w>", "+"], "commands": ["workbench.action.increaseViewHeight"] },
    { "before": ["<C-w>", "-"], "commands": ["workbench.action.decreaseViewHeight"] },
    { "before": ["<C-w>", "_"], "commands": ["workbench.action.maximizeEditor"] },

    // restart eslint/typescript.
    { "before": ["<leader>", "e", "r"], "commands": ["eslint.restart"] },
    { "before": ["<leader>", "t", "r"], "commands": ["typescript.restartTsServer"] },

    // alternate file.
    { "before": ["<leader>", "a", "a"], "commands": ["alternate.alternateFile"] },
    { "before": ["<leader>", "a", "v"], "commands": ["alternate.alternateFileInSplit"] },
    {
      "before": ["<leader>", "a", "c", "a"],
      "commands": ["alternate.createAlternateFile"]
    },
    {
      "before": ["<leader>", "a", "c", "v"],
      "commands": ["alternate.createAlternateFileInSplit"]
    },

    // tests.
    {
      "before": ["<leader>", "t", "n"],
      "commands": ["test-explorer.run-test-at-cursor"]
    },
    {
      "before": ["<leader>", "d", "n"],
      "commands": ["test-explorer.debug-test-at-cursor"]
    },
    { "before": ["<leader>", "t", "f"], "commands": ["test-explorer.run-this-file"] },
    { "before": ["<leader>", "t", "s"], "commands": ["test-explorer.run-all"] },
    { "before": ["<leader>", "t", "l"], "commands": ["test-explorer.rerun"] },

    // open-in-vim.
    { "before": ["<leader>", "v", "e"], "commands": ["open-in-vim.open"] },

    // emmet.
    {
      "before": ["<leader>", "e", "w"],
      "commands": ["editor.emmet.action.wrapWithAbbreviation"]
    },

    // git.
    { "before": ["<leader>", "g", "d"], "commands": ["git.openChange"] },
    {
      "before": ["<leader>", "g", "a"],
      "commands": ["git.stage", "giteasy.doAddCurrentFile"]
    },
    { "before": ["<leader>", "g", "u"], "commands": ["git.unstage"] },
    { "before": ["<leader>", "g", "c", "l"], "commands": ["git.clean"] },
    { "before": ["<leader>", "g", "l"], "commands": ["git-graph.view"] },
    { "before": ["<leader>", "g", "f"], "commands": ["git.openFile"] },

    // code actions.
    {
      "before": ["<leader>", "e", "c"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.extract.constant" }
        }
      ]
    },
    {
      "before": ["<leader>", "e", "f"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.extract.function" }
        }
      ]
    },
    {
      "before": ["<leader>", "e", "t"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.extract.type" }
        }
      ]
    },
    {
      "before": ["<leader>", "a", "b"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.rewrite.arrow.braces" }
        }
      ]
    },
    {
      "before": ["<leader>", "m", "f"],
      "commands": [
        {
          "command": "editor.action.codeAction",
          "args": { "kind": "refactor.move.newFile" }
        }
      ]
    },

    // neovim mirroring leader commands.
    { "before": ["<leader>", "r", "n"], "commands": ["editor.action.rename"] },
    { "before": ["<leader>", "c", "a"], "commands": ["editor.action.codeAction"] },
    { "before": ["<leader>", "p", "r"], "commands": ["editor.action.goToReferences"] },
    { "before": ["<leader>", "h", "s"], "commands": ["git.stageSelectedRanges"] },
    { "before": ["<leader>", "h", "r"], "commands": ["git.revertSelectedRanges"] },
    {
      "before": ["<leader>", "n"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },
    {
      "before": ["<leader>", "f", "f"],
      "commands": ["workbench.action.quickOpen"]
    },

    // custom leader commands.
    { "before": ["<leader>", "g", "o"], "commands": ["editor.action.openLink"] },

    // unimpaired commands.
    { "before": ["[", "b"], "commands": ["workbench.action.previousEditorInGroup"] },
    { "before": ["]", "b"], "commands": ["workbench.action.nextEditorInGroup"] },
    { "before": ["[", "B"], "commands": ["workbench.action.firstEditorInGroup"] },
    { "before": ["]", "B"], "commands": ["workbench.action.lastEditorInGroup"] },
    { "before": ["[", " "], "commands": ["editor.action.insertLineBefore"] },
    { "before": ["]", " "], "commands": ["editor.action.insertLineAfter"] },
    { "before": ["[", "e"], "commands": ["editor.action.moveLinesUpAction"] },
    { "before": ["]", "e"], "commands": ["editor.action.moveLinesDownAction"] },
    {
      "before": ["[", "f"],
      "commands": ["workbench.view.explorer", "list.focusUp", "explorer.openAndPassFocus"]
    },
    {
      "before": ["]", "f"],
      "commands": [
        "workbench.view.explorer",
        "list.focusDown",
        "explorer.openAndPassFocus"
      ]
    },
    {
      "before": ["[", "g"],
      // "commands": ["editor.action.marker.prevInFiles", "closeMarkersNavigation"]
      "commands": ["editor.action.marker.prev", "closeMarkersNavigation"]
    },
    {
      "before": ["]", "g"],
      // "commands": ["editor.action.marker.nextInFiles", "closeMarkersNavigation"]
      "commands": ["editor.action.marker.next", "closeMarkersNavigation"]
    },

    // vim-gitgutter
    {
      "before": ["[", "c"],
      "commands": [
        "workbench.action.compareEditor.previousChange",
        "workbench.action.editor.previousChange"
      ]
    },
    {
      "before": ["]", "c"],
      "commands": [
        "workbench.action.compareEditor.nextChange",
        "workbench.action.editor.nextChange"
      ]
    }

    // custom unimpaired commands.
    // { "before": ["[", "w"], "commands": ["workbench.action.focusPreviousGroup"] },
    // { "before": ["]", "w"], "commands": ["workbench.action.focusNextGroup"] }
    // { "before": ["[", "a"], "commands": ["workbench.action.moveEditorToLeftGroup"] },
    // { "before": ["]", "a"], "commands": ["workbench.action.moveEditorToRightGroup"] }
  ],

  //* Emmet.
  // "emmet.useInlineCompletions": true,
  "emmet.includeLanguages": {
    "javascript": "javascriptreact"
    // "django-html": "html"
  },

  //* Prettier.
  "prettier.printWidth": 90,
  "prettier.arrowParens": "avoid",

  //* Beautify.
  "beautify.language": {
    "html": ["htm", "html", "django-html"]
  },

  //* Stylelint.
  "stylelint.validate": ["css", "scss", "tailwindcss"],

  //* Color Highlight.
  "color-highlight.languages": [
    "json",
    "jsonc",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "color-highlight.markerType": "dot-before",
  "color-highlight.markRuler": false,

  //* Todo Tree.
  "todo-tree.regex.regexCaseSensitive": true,
  "todo-tree.general.tags": ["TODO", "NOTE", "HACK", "FIXME", "BUG"],
  "todo-tree.highlights.customHighlight": {
    "TODO": { "foreground": "#66ffa6", "gutterIcon": false, "icon": "flame" },
    "NOTE": { "foreground": "#ffd700", "gutterIcon": false, "icon": "bookmark" },
    "HACK": { "foreground": "#78f0e0", "gutterIcon": true, "icon": "smiley" },
    "FIXME": { "foreground": "#ffdab9", "gutterIcon": true, "icon": "flame" },
    "BUG": { "foreground": "#FF5874", "gutterIcon": true, "icon": "flame" }
  },

  //* Better Comments.
  "better-comments.highlightPlainText": false,
  "better-comments.tags": [
    { "tag": "!", "color": "#FF5874" },
    { "tag": "?", "color": "#3498DB" },
    { "tag": "*", "color": "#98C379" },
    { "tag": "//", "color": "#474747", "strikethrough": true },
    { "tag": "##", "color": "#474747", "strikethrough": true }
  ],

  //* Highlight Matching Tag.
  "highlight-matching-tag.highlightSelfClosing": true,
  "highlight-matching-tag.styles": { "opening": { "name": { "underline": "gold" } } },

  //* Settings Cycler.
  "settings.cycle": [
    {
      // Do not put "editor.inlayHints.enabled": "on/off" here.
      // We want ^? typescript comment inlay hint to work even when other inlay hints
      // are disabled.
      "id": "inlayHints",
      "overrideWorkspaceSettings": false,
      "values": [
        {
          // "typescript.inlayHints.parameterNames.enabled": "literals",
          "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
          "typescript.inlayHints.variableTypes.enabled": true,
          "typescript.inlayHints.parameterTypes.enabled": true,
          "typescript.inlayHints.enumMemberValues.enabled": true,

          // "javascript.inlayHints.parameterNames.enabled": "literals",
          "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
          "javascript.inlayHints.variableTypes.enabled": true,

          "python.analysis.inlayHints.variableTypes": true,
          "python.analysis.inlayHints.functionReturnTypes": true
        },
        {
          // "typescript.inlayHints.parameterNames.enabled": "none",
          "typescript.inlayHints.functionLikeReturnTypes.enabled": false,
          "typescript.inlayHints.variableTypes.enabled": false,
          "typescript.inlayHints.parameterTypes.enabled": false,
          "typescript.inlayHints.enumMemberValues.enabled": false,

          // "javascript.inlayHints.parameterNames.enabled": "none",
          "javascript.inlayHints.functionLikeReturnTypes.enabled": false,
          "javascript.inlayHints.variableTypes.enabled": false,

          "python.analysis.inlayHints.variableTypes": false,
          "python.analysis.inlayHints.functionReturnTypes": false
        }
      ]
    }
  ],

  //* Code Spell Checker.
  "cSpell.allowCompoundWords": true,
  "cSpell.language": "en,en-GB,ru",
  "cSpell.ignoreRegExpList": [
    "asgi",
    "isort",
    "isdigit",
    "noqa",
    "pipenv",
    "psql",
    "pytest",
    "yapf",
    "yasg",
    "zfill",
    "ipdb",
    "ipynb",
    "venv"
  ],
  "cSpell.userWords": [
    "arrowup",
    "clsx",
    "Danilov",
    "esbuild",
    "nestjs",
    "nextjs",
    "properoom",
    "scipy",
    "signup"
  ],

  //* Gitlens.
  "gitlens.plusFeatures.enabled": false,

  //* Open In Vim.
  "open-in-vim.restoreCursorAfterVim": true,
  "open-in-vim.useNeovim": true,

  //* Tailwind.
  "tailwindCSS.classAttributes": [
    "class",
    "className",
    "ngClass",
    // When I create custom components, I often configure their styles through `classNames` property.
    "classNames"
  ],
  // NOTE: If you are debugging this, don't forget to comment out your workspace tailwind
  // settings.
  "tailwindCSS.experimental.classRegex": [
    // Provide intellisense in variables, object properties and jsx props.
    // This causes "cssConflict" warnings inside create-t3-app and remix
    "[cC]lassName\\s*[:=]\\s*{?[\"']([^']*)[\"']}?",
    // clsx()
    ["clsx\\(([^)]*)\\)", "'([^']*)'"],
    // cva()
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
  ],
  "tailwindCSS.lint.cssConflict": "ignore",

  //* VSCode Icons.
  "vsicons.dontShowNewVersionMessage": true,
  "vsicons.associations.files": [
    // Associating css files to tailwindcss files removed the css icon, this fixes it.
    { "icon": "css", "extensions": ["css"], "format": "svg" }
  ],

  //* Emoji Sense.
  "emojisense.languages": {
    "json": true,
    "jsonc": true,
    "javascript": true,
    "javascriptreact": true,
    "typescript": true,
    "typescriptreact": true,
    "python": true,
    "shellscript": true,
    "html": true,
    "django-html": true,
    "css": true,
    "scss": true,
    "tailwindcss": true
  },

  //* Error Lens.
  "errorLens.enabled": true,
  "errorLens.enabledDiagnosticLevels": ["error", "warning"],
  "errorLens.followCursor": "closestProblem",
  "errorLens.messageTemplate": "$message ($source)",
  "errorLens.messageBackgroundMode": "none",
  // "errorLens.fontStyleItalic": true,

  //* Git Project Manager.
  "gitProjectManager.baseProjectsFolders": ["/users/defytheflow/dev/repos"],
  "gitProjectManager.ignoredFolders": ["node_modules"],
  // "gitProjectManager.storeRepositoriesBetweenSessions": true,

  "redhat.telemetry.enabled": false,
  "react-native-tools.showUserTips": false,
  "haskell.manageHLS": "GHCup",
  "quokka.showStartViewOnFeatureRelease": false,
  "editor.minimap.enabled": false,
  "lldb.library": "/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Versions/A/LLDB",
  "window.zoomLevel": -1,
  "console-ninja.showWhatsNew": false
}
